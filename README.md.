# Multi-Agent Multi-Directional Cooperative RRT* With Webots Simulator

This project implements a Multi-Agent Multi-Directional Cooperative RRT* (Rapidly-exploring Random Tree Star) algorithm using the Webots simulator. The framework facilitates robot cooperation in navigating a shared environment.

## Project Structure

├── controllers/
│   ├── goto_cont/           # Contains the controller code for individual robots
│   │   └── goto_cont.py
│   ├── my_ground/           # Contains the supervisor controller code
│       └── my_ground.py
├── plots/                   # Directory for simulation result visualizations
├── protos/                  # Custom object prototype files for Webots
├── worlds/                  # World files for Webots simulations
│   └── create4.wbt          # The main Webots world file
├── data_analysis.ipynb      # Jupyter notebook for data analysis of simulation results
├── data_analysis_battery_mode.ipynb # Notebook for analyzing battery mode simulations
├── new_alg_code.ipynb       # Jupyter notebook containing the implementation of the new algorithm


### Key Directories and Files

#### **controllers**
- `goto_cont/`: Contains `goto_cont.py`, the controller code for robot movement.
- `my_ground/`: Contains `my_ground.py`, the supervisor controller code, responsible for managing the simulation parameters and running the simulations.

#### **worlds**
- `create4.wbt`: The main Webots world file, which should be loaded to run the simulations.

#### **Jupyter Notebooks**
- `data_analysis.ipynb`: Provides data analysis of the simulation results.
- `data_analysis_battery_mode.ipynb`: Focuses on analyzing simulations in battery mode.
- `new_alg_code.ipynb`: Implements and tests the new Multi-Agent Multi-Directional Cooperative RRT* algorithm.

## Simulation Overview

### Supervisor Parameters
The main simulation logic is managed by `my_ground.py`, which offers several configurable parameters:

```python
battery_mode = False  # Enable battery mode simulation
run_simulations_mode = True  # Enable series of simulations
save_mode = False  # Save simulation results

# Parameters for simulation mode
min_robots = 1  # Minimum number of robots
max_robots = 5  # Maximum number of robots

# Parameters for single simulation mode
robot_number = 1  # Number of robots
seed = 42  # Random seed
patch_number = 7  # Patch number

Modify these parameters to customize the simulation’s behavior, including the number of robots, whether to run in battery mode, and saving the simulation results.

Running the Simulation

	1.	Load the create4.wbt file from the worlds directory into Webots.
	2.	Run the simulation using the supervisor controller my_ground.py.

Features

	•	Multi-Agent Cooperation: The implementation demonstrates collaborative navigation using the RRT* algorithm.
	•	Customizable Simulations: Adjustable parameters allow for testing various configurations, including the number of robots and environmental patches.
	•	Battery Mode: Evaluate the effect of limited power on robot navigation.
	•	Data Analysis: Notebooks are provided for analyzing and visualizing the results of simulations.

Getting Started

Prerequisites

	•	Webots simulator installed on your system.
	•	Python 3.x for running controllers and data analysis notebooks.
	•	Required Python libraries: numpy, matplotlib, jupyter.

Running the Code

	1.	Open Webots and load the create4.wbt world file.
	2.	Run the supervisor controller located at controllers/my_ground/my_ground.py.
	3.	Use the Jupyter notebooks for analyzing simulation results and testing new algorithms.

Contributions

Feel free to open an issue or submit a pull request if you have suggestions, questions, or contributions for the project.

License

This project is licensed under the MIT License.

### Explanation:
1. **Project Introduction**: Highlights the main purpose of your project.
2. **Structure Overview**: Gives an organized view of the directories and files.
3. **Simulation Details**: Explains the role of key components like `my_ground.py` and `create4.wbt`.
4. **Usage Instructions**: Describes how to set up and run the simulation.
5. **Analysis and Extensions**: Mentions the notebooks for deeper analysis and algorithm development.
6. **Contribution Section**: Encourages collaboration.
